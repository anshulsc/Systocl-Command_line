#!/bin/bash

# sysopctl - A command-line utility for system administration

VERSION="v0.1.0"

# Function to display help message
display_help() {
    echo "Usage: sysopctl [OPTION]... [COMMAND]..."
    echo "A tool to simplify system administration tasks."
    echo ""
    echo "Options:"
    echo "  --help                  Display this help message and exit."
    echo "  --version               Display the version and exit."
    echo ""
    echo "Commands:"
    echo "  service list            List all active services."
    echo "  service start NAME      Start a service."
    echo "  service stop NAME       Stop a service."
    echo "  system load             Display system load averages."
    echo "  disk usage              Show disk usage statistics."
    echo "  process monitor         Display real-time process activity."
    echo "  logs analyze            Analyze recent critical log entries."
    echo "  backup PATH             Backup the specified path."
    echo ""
    echo "Examples:"
    echo "  sysopctl service list"
    echo "  sysopctl service start apache2"
    echo "  sysopctl backup /etc"
}

# Function to display version information
display_version() {
    echo "sysopctl version ${VERSION}"
}

list_services() {
# Set the PYTHONWARNINGS environment variable to ignore DeprecationWarnings
  export PYTHONWARNINGS="ignore:invalid escape sequence:DeprecationWarning"

  # Run systemctl
  systemctl list-units --type=service --state=active

  # Unset the environment variable (optional, for cleanup)
  unset PYTHONWARNINGS
}


# Function to display system load
display_system_load() {
    uptime
}


# Function to start a service
start_service() {
    if [[ -z "$1" ]]; then
        echo "Error: Service name required."
        exit 1
    fi
    sudo systemctl start "$1"
    echo "Service '$1' started successfully."
}

# Function to stop a service
stop_service() {
    if [[ -z "$1" ]]; then
        echo "Error: Service name required."
        exit 1
    fi
    sudo systemctl stop "$1"
    echo "Service '$1' stopped successfully."
}

# Function to display disk usage
display_disk_usage() {
    df -h
}


# Function to monitor system processes
monitor_processes() {
    # You can use top or htop (if installed)
    # Example using top:
    top -a -n 1 | head -n 15  # Show top output once and take top 15 lines
}

analyze_logs() {
    # Example using journalctl to show critical logs from the last hour
    sudo journalctl --since "1 hour ago" --priority=3 --pager-end
}


# Function to perform backup
perform_backup() {
    if [[ -z "$1" ]]; then
        echo "Error: Backup path required."
        exit 1
    fi

    local target_path="$1"
    local backup_dir="/var/backups/sysopctl"  # Or any suitable location
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_file="backup_${timestamp}.tar.gz"

    echo "Starting backup of '$target_path' to '$backup_dir/$backup_file'..."

    # Create backup directory if it doesn't exist
    sudo mkdir -p "$backup_dir"

    # Use tar for backup (rsync is another option)
    sudo tar -czvf "$backup_dir/$backup_file" "$target_path"

    if [[ $? -eq 0 ]]; then
        echo "Backup completed successfully: $backup_dir/$backup_file"
    else
        echo "Error during backup. Check permissions and disk space."
        exit 1
    fi
}


# Main logic (for now, just handle --help and --version)
if [[ $# -eq 0 ]]; then
    display_help
    exit 1
fi

case "$1" in
    --help)
        display_help
        ;;
    --version)
        display_version
        ;;
    service)
        if [[ "$2" == "list" ]]; then
            list_services
        elif [[ "$2" == "start" ]]; then
            start_service "$3"
        elif [[ "$2" == "stop" ]]; then
            stop_service "$3"
        else
            echo "Invalid usage of service command. See --help for usage."
            exit 1
        fi
        ;;

     system)
        if [[ "$2" == "load" ]]; then
            display_system_load
        else
            echo "Invalid usage of system command. Use 'sysopctl system load'."
            exit 1
        fi
        ;;

    disk)
        if [[ "$2" == "usage" ]]; then
            display_disk_usage
        else
            echo "Invalid usage of disk command. Use 'sysopctl disk usage'."
            exit 1
        fi
        ;;

     process)
        if [[ "$2" == "monitor" ]]; then
            monitor_processes
        else
            echo "Invalid usage of process command. Use 'sysopctl process monitor'."
            exit 1
        fi
        ;;

    logs)
        if [[ "$2" == "analyze" ]]; then
            analyze_logs
        else
            echo "Invalid usage of logs command. Use 'sysopctl logs analyze'."
            exit 1
        fi
        ;;

    backup)
        perform_backup "$2"
        ;;

    *)
        echo "Invalid option or command. Use --help for usage."
        exit 1
        ;;
esac

exit 0